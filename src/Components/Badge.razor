@namespace Soenneker.Quark
@inherits Soenneker.Quark.Element
@implements IBadge

<Span @attributes="BuildAttributes()" >
    @ChildContent
</Span>

@code {
	public override string? ThemeKey { get; set; } = "Badge";

    [Parameter]
    public BadgeType Type { get; set; } = BadgeType.Badge;

    [Parameter]
    public CssValue<ColorBuilder>? Color { get; set; }

    [Parameter]
    public bool Rounded { get; set; }

    private string? GetTypeClass()
    {
        if (Type == BadgeType.Pill)
            return "rounded-pill";

        if (Type == BadgeType.Dot)
            return "badge-dot";

        return null;
    }

    private string? GetColorClass()
    {
        if (Color is not null && !Color.Value.IsEmpty)
        {
            string? token = null;
            var isTheme = Color.Value.TryGetBootstrapThemeToken(out token);

            if (isTheme && token is not null)
            {
                // Bootstrap theme token (e.g., "primary", "secondary")
                return $"bg-{token}";
            }
            else
            {
                var colorValue = Color.Value.ToString();

                if (!string.IsNullOrEmpty(colorValue))
                {
                    return Color.Value.IsCssClass ? $"bg-{colorValue}" : null;
                }
            }
        }

        return null;
    }


    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        AppendToClassAttr(attributes, "badge");
        
        var typeClass = GetTypeClass();
        if (typeClass != null)
            AppendToClassAttr(attributes, typeClass);

        var colorClass = GetColorClass();
        if (colorClass != null)
            AppendToClassAttr(attributes, colorClass);

        if (Rounded)
            AppendToClassAttr(attributes, "rounded");

        return attributes;
    }

}

@namespace Soenneker.Quark
@using Soenneker.Blazor.Extensions.EventCallback

@inherits Soenneker.Quark.Element

<Button OnClick="HandleToggle" @attributes="BuildAttributes()">
    @ChildContent
</Button>

@code {
	public override string? ThemeKey { get; set; } = "BarToggler";

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnToggle { get; set; }

    [Parameter]
    public BarTogglerMode Mode { get; set; } = BarTogglerMode.Normal;

	[CascadingParameter]
	public BarMode BarMode { get; set; } = BarMode.Horizontal;

    [CascadingParameter]
    public Func<MouseEventArgs, Task>? BarToggleHandler { get; set; }


    protected override Dictionary<string, object> BuildAttributes()
    {
        Attributes = base.BuildAttributes();

        var baseClass = "navbar-toggler";
        
        if (Mode == BarTogglerMode.Popout)
            baseClass = $"{baseClass} navbar-toggler-popout";

        AppendToClassAttr(Attributes, baseClass);

		// For horizontal navbars, wire up Bootstrap's collapse behavior
		if (BarMode == BarMode.Horizontal && !string.IsNullOrWhiteSpace(Target))
		{
            Attributes["data-bs-toggle"] = "collapse";
            Attributes["data-bs-target"] = Target!;
			// aria-controls expects the id without the '#'
			var controls = Target!.StartsWith("#") ? Target.Substring(1) : Target!;
            Attributes["aria-controls"] = controls;
            Attributes["type"] = "button";
		}

        return Attributes;
    }

    private async Task HandleToggle(MouseEventArgs args)
    {
        // Use cascading handler if available, otherwise use the OnToggle parameter
        if (BarToggleHandler != null)
        {
            await BarToggleHandler(args);
        }
        else
        {
            await OnToggle.InvokeIfHasDelegate(args);
        }
    }
}
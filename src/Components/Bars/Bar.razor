@namespace Soenneker.Quark
@using Soenneker.Blazor.Extensions.EventCallback
@inherits Soenneker.Quark.CancellableElement

@inject IBarInterop BarInterop 

<CascadingValue Value="@Mode" IsFixed="true">
    <CascadingValue Value="@HandleBarTogglerClick" IsFixed="true">
        <CascadingValue Value="@_sidebarCollapsed" IsFixed="true">
            <CascadingValue Value="@_collapseGroupId" IsFixed="true">
                <CascadingValue Value="@_forceCollapseAll" IsFixed="true">
                    <nav @attributes="BuildAttributes()">
                        @ChildContent
                    </nav>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
	public override string? ThemeKey { get; set; } = "Bar";

    [Parameter]
    public BarMode Mode { get; set; } = BarMode.Horizontal;

    [Parameter]
    public BarPlacement Placement { get; set; } = BarPlacement.Top;

    [Parameter]
    public CssValue<ColorBuilder> Color { get; set; } = Quark.Color.Light;

    [Parameter]
    public bool Expand { get; set; } = true;

    [Parameter]
    public bool Dark { get; set; }

    [Parameter]
    public bool Transparent { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public BarCollapseMode CollapseMode { get; set; } = BarCollapseMode.Hide;

    [Parameter]
    public BarMenuToggleBehavior MenuToggleBehavior { get; set; } = BarMenuToggleBehavior.AllowMultipleMenus;

    [CascadingParameter]
    public bool SidebarVisible { get; set; } = true;

    [CascadingParameter]
    public EventCallback<bool> SidebarVisibleChanged { get; set; }
    private readonly string _collapseGroupId = $"sidebar-accordion-{Guid.NewGuid():N}";
    private bool _sidebarCollapsed;
    private bool _forceCollapseAll;

    /// <summary>
    /// Used for responsive collapsing. Sets the breakpoint at which the navbar will expand.
    /// </summary>
    [Parameter]
    public BreakpointType? Breakpoint { get; set; }

    /// <summary>
    /// Used for responsive navigation. Sets the breakpoint at which the navigation will collapse.
    /// </summary>
    [Parameter]
    public BreakpointType? NavigationBreakpoint { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Initialize vertical navbar styles if needed
        if (Mode != BarMode.Horizontal)
        {
            await BarInterop.Initialize(CancellationToken);
        }
    }

    private string GetBaseClass()
    {
        if (Mode == BarMode.Horizontal)
            return "navbar";
        
        // For vertical mode, don't use navbar classes to avoid collapse behavior
        return "";
    }

    private string? GetPlacementClass()
    {
        if (Placement == BarPlacement.Fixed)
            return $"fixed-{Placement.Value}";

        if (Placement == BarPlacement.Sticky)
            return $"sticky-{Placement.Value}";

        return null;
    }

    private string? GetColorClass()
    {
        if (Dark)
            return "navbar-dark";

        return "navbar-light";
    }

    private string? GetBackgroundClass()
    {
        if (Transparent)
            return "bg-transparent";

        string? token = null;
        var isClass = Color.TryGetBootstrapThemeToken(out token);

        if (isClass && token is not null)
            return $"bg-{token}";

        return null;
    }

    private string? GetVerticalClass()
    {
        // For vertical mode, don't use navbar classes to avoid collapse behavior
        return null;
    }

    private string? GetExpandClass()
    {
        if (!Expand || Mode != BarMode.Horizontal)
            return null;

        var breakpointToken = BreakpointUtil.GetBreakpointToken(Breakpoint);
        
        if (string.IsNullOrEmpty(breakpointToken))
            return "navbar-expand-lg"; // Default

        return $"navbar-expand-{breakpointToken}";
    }

    private string? GetCollapseClass()
    {
        if (!Visible)
        {
            return CollapseMode.Value switch
            {
                BarCollapseMode.HideValue => "navbar-hidden",
                BarCollapseMode.SmallValue => "navbar-collapsed",
                _ => "navbar-hidden"
            };
        }

        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        var attributes = base.BuildAttributes();

        var classes = new List<string> { GetBaseClass() };

        // Add placement class
        var placementClass = GetPlacementClass();
        if (placementClass != null)
            classes.Add(placementClass);

        // Add color class
        var colorClass = GetColorClass();
        if (colorClass != null)
            classes.Add(colorClass);

        // Add background class
        var backgroundClass = GetBackgroundClass();
        if (backgroundClass != null)
            classes.Add(backgroundClass);

        // Add vertical specific class
        var verticalClass = GetVerticalClass();
        if (verticalClass != null)
            classes.Add(verticalClass);

        // Add expand class (horizontal only)
        var expandClass = GetExpandClass();
        if (expandClass != null)
            classes.Add(expandClass);

        // Add collapse class (only for horizontal mode)
        if (Mode == BarMode.Horizontal)
        {
            var collapseClass = GetCollapseClass();
            if (collapseClass != null)
                classes.Add(collapseClass);
        }

        // For vertical sidebar mode, add specific styling
        if (Mode != BarMode.Horizontal)
        {
            classes.Add("d-flex");
            classes.Add("flex-column");
            classes.Add("flex-shrink-0");
            classes.Add("p-3");
            classes.Add("bg-light");
            classes.Add("border-end");
            
            // Determine vertical sidebar state classes and width
            if (!SidebarVisible)
            {
                classes.Add("sidebar-hidden");
                AppendStyleDeclAttr(attributes, "width: 0px");
            }
            else if (CollapseMode == BarCollapseMode.Small && _sidebarCollapsed)
            {
                classes.Add("sidebar-collapsed");
                AppendStyleDeclAttr(attributes, "width: 60px");
            }
            else
            {
                AppendStyleDeclAttr(attributes, "width: 250px");
            }

            AppendStyleDeclAttr(attributes, "height: 100%");

            // Ensure the vertical nav participates in layout width, not flex-grow
            AppendStyleDeclAttr(attributes, "flex: 0 0 auto");

            // Provide a grouping id to act as Bootstrap collapse parent so only one opens at a time
            attributes["id"] = _collapseGroupId;
        }

        AppendToClassAttr(attributes, string.Join(" ", classes));

        return attributes;
    }


    public async Task ToggleSidebar()
    {
        if (Mode == BarMode.Horizontal)
        {
            return;
        }

        if (CollapseMode == BarCollapseMode.Small)
        {
            // Toggle collapsed state for vertical bars when in Small collapse mode
            _sidebarCollapsed = !_sidebarCollapsed;
            // Defer StateHasChanged to avoid re-render during event handling
            _ = InvokeAsync(StateHasChanged);
            return;
        }

        // Fallback: toggle visibility (hide/show)
        await SidebarVisibleChanged.InvokeIfHasDelegate(!SidebarVisible);
    }

    private async Task HandleBarTogglerClick(MouseEventArgs args)
    {
        if (Mode != BarMode.Horizontal)
        {
            // For vertical bars, toggle collapsed or hidden depending on CollapseMode
            await ToggleSidebar();
        }
        
        // Collapse all dropdown menus when BarToggle is clicked
        await CollapseAllDropdowns();
    }
    
    private async Task CollapseAllDropdowns()
    {
        // Trigger collapse of all dropdowns by updating state
        _forceCollapseAll = true;
        StateHasChanged();
        
        // Reset the flag after a brief delay to allow for re-opening
        await Task.Delay(100);
        _forceCollapseAll = false;
    }


}

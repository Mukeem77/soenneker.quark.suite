@page "/alerts"

<Div class="page-header">
    <H1>Soenneker.Quark.Alerts Demo</H1>
    <Text>This page demonstrates some of the common usages for the alerts library.</Text>
</Div>

<div>
    <h2>Basic Alerts</h2>
    <div class="mb-3">
        <Alert Color="@Color.Primary">This is a primary alert!</Alert>
        <Alert Color="@Color.Secondary">This is a secondary alert!</Alert>
        <Alert Color="@Color.Success">This is a success alert!</Alert>
        <Alert Color="@Color.Danger">This is a danger alert!</Alert>
        <Alert Color="@Color.Warning">This is a warning alert!</Alert>
        <Alert Color="@Color.Info">This is an info alert!</Alert>
        <Alert Color="@Color.Light">This is a light alert!</Alert>
        <Alert Color="@Color.Dark">This is a dark alert!</Alert>
    </div>
</div>

<hr />

<div>
    <h2>Dismissible Alerts</h2>
    <div class="mb-3">
        <Alert Color="@Color.Primary" Dismissible="true" OnDismiss="HandleDismiss">
            This is a dismissible primary alert!
        </Alert>
        <Alert Color="@Color.Success" Dismissible="true" OnDismiss="HandleDismiss">
            This is a dismissible success alert!
        </Alert>
        <Alert Color="@Color.Warning" Dismissible="true" OnDismiss="HandleDismiss">
            This is a dismissible warning alert!
        </Alert>
    </div>
</div>

<hr />

<div>
    <h2>Alert with Custom Content</h2>
    <div class="mb-3">
        <Alert Color="@Color.Info" Dismissible="true" OnDismiss="HandleDismiss">
            <h4 class="alert-heading">Well done!</h4>
            <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
            <hr>
            <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
        </Alert>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

    private async Task HandleDismiss()
    {
        await Task.CompletedTask;
    }
}
